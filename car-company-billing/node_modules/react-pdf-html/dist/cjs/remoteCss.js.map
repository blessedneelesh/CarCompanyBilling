{"version":3,"file":"remoteCss.js","sourceRoot":"","sources":["../../src/remoteCss.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uDAAyC;AAEzC,yCAA+C;AAC/C,yCAAyC;AAE5B,QAAA,SAAS,GAAG,IAAA,sBAAW,EAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AAE7C,MAAM,eAAe,GAAG,CAC7B,GAAW,EACX,YAA0B,EAC1B,KAAK,GAAG,IAAI,EACZ,EAAE;IACF,IAAI,KAAa,CAAC;IAElB,IAAI,KAAK,IAAI,iBAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC/B,OAAO,iBAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC3B;SAAM;QACL,KAAK,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;KACvD;IAED,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;KACzC;IAED,IAAI,KAAK,EAAE;QACT,iBAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC3B;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC;AAtBW,QAAA,eAAe,mBAsB1B;AAEK,MAAM,gBAAgB,GAAG,CAC9B,IAAY,EACZ,YAA0B,EAC1B,EAAE;IACF,MAAM,QAAQ,GAAG,IAAA,wBAAK,EAAC,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;IAEjD,MAAM,WAAW,GAAiB,EAAE,CAAC;IAErC,MAAM,QAAQ,GAAoB,QAAQ;SACvC,gBAAgB,CAAC,8BAA8B,CAAC;SAChD,GAAG,CAAC,CAAO,SAAS,EAAE,EAAE;QACvB,IAAI;YACF,MAAM,SAAS,GAAG,MAAM,IAAA,uBAAe,EACrC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAW,EACxC,YAAY,CACb,CAAC;YACF,IAAI,SAAS,EAAE;gBACb,WAAW,CAAC,IAAI,CAAC,IAAA,4BAAiB,EAAC,SAAS,CAAC,CAAC,CAAC;aAChD;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,KAAK,CACX,iCAAiC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EACjE,CAAC,CACF,CAAC;SACH;IACH,CAAC,CAAA,CAAC,CAAC;IAEL,IAAI;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC7B;IAAC,OAAO,CAAC,EAAE,GAAE;IAEd,OAAO,WAAW,CAAC;AACrB,CAAC,CAAA,CAAC;AAhCW,QAAA,gBAAgB,oBAgC3B","sourcesContent":["import { parse } from 'node-html-parser';\nimport { HtmlStyles } from './styles.js';\nimport { convertStylesheet } from './parse.js';\nimport { createCache } from './cache.js';\n\nexport const CSS_CACHE = createCache({ limit: 30 });\n\nexport const fetchStylesheet = async (\n  src: string,\n  fetchOptions?: RequestInit,\n  cache = true\n) => {\n  let image: string;\n\n  if (cache && CSS_CACHE.get(src)) {\n    return CSS_CACHE.get(src);\n  } else {\n    image = await (await fetch(src, fetchOptions)).text();\n  }\n\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n\n  if (cache) {\n    CSS_CACHE.set(src, image);\n  }\n\n  return image;\n};\n\nexport const fetchStylesheets = async (\n  html: string,\n  fetchOptions?: RequestInit\n) => {\n  const document = parse(html, { comment: false });\n\n  const stylesheets: HtmlStyles[] = [];\n\n  const promises: Promise<void>[] = document\n    .querySelectorAll('link[rel=\"stylesheet\"][href]')\n    .map(async (styleNode) => {\n      try {\n        const styleText = await fetchStylesheet(\n          styleNode.getAttribute('href') as string,\n          fetchOptions\n        );\n        if (styleText) {\n          stylesheets.push(convertStylesheet(styleText));\n        }\n      } catch (e) {\n        console.error(\n          `Unable to get remote CSS file ${styleNode.getAttribute('href')}`,\n          e\n        );\n      }\n    });\n\n  try {\n    await Promise.all(promises);\n  } catch (e) {}\n\n  return stylesheets;\n};\n"]}